# coding: utf-8

"""
    Tpay.com Technical Documentation

     <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>  # noqa: E501

    The version of the OpenAPI document: 1.1.2
    Contact: pt@tpay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VcFinishFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_password': 'str',
        'summary_data': 'list[VcFinishRequestExample]',
        'call_id': 'str',
        'language': 'Language',
        'sign': 'str',
        'enable_pow_url': 'int'
    }

    attribute_map = {
        'api_password': 'api_password',
        'summary_data': 'summary_data',
        'call_id': 'call_id',
        'language': 'language',
        'sign': 'sign',
        'enable_pow_url': 'enable_pow_url'
    }

    def __init__(self, api_password=None, summary_data=None, call_id=None, language=None, sign=None, enable_pow_url=None, local_vars_configuration=None):  # noqa: E501
        """VcFinishFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_password = None
        self._summary_data = None
        self._call_id = None
        self._language = None
        self._sign = None
        self._enable_pow_url = None
        self.discriminator = None

        self.api_password = api_password
        if summary_data is not None:
            self.summary_data = summary_data
        self.call_id = call_id
        if language is not None:
            self.language = language
        self.sign = sign
        if enable_pow_url is not None:
            self.enable_pow_url = enable_pow_url

    @property
    def api_password(self):
        """Gets the api_password of this VcFinishFields.  # noqa: E501

        API password.  # noqa: E501

        :return: The api_password of this VcFinishFields.  # noqa: E501
        :rtype: str
        """
        return self._api_password

    @api_password.setter
    def api_password(self, api_password):
        """Sets the api_password of this VcFinishFields.

        API password.  # noqa: E501

        :param api_password: The api_password of this VcFinishFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_password is None:  # noqa: E501
            raise ValueError("Invalid value for `api_password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                api_password is not None and len(api_password) > 40):
            raise ValueError("Invalid value for `api_password`, length must be less than or equal to `40`")  # noqa: E501

        self._api_password = api_password

    @property
    def summary_data(self):
        """Gets the summary_data of this VcFinishFields.  # noqa: E501

        Modified summary_data parameter received from visacheckout_prepare. Can be used, when the total amount or other parameters changea in the order process.  # noqa: E501

        :return: The summary_data of this VcFinishFields.  # noqa: E501
        :rtype: list[VcFinishRequestExample]
        """
        return self._summary_data

    @summary_data.setter
    def summary_data(self, summary_data):
        """Sets the summary_data of this VcFinishFields.

        Modified summary_data parameter received from visacheckout_prepare. Can be used, when the total amount or other parameters changea in the order process.  # noqa: E501

        :param summary_data: The summary_data of this VcFinishFields.  # noqa: E501
        :type: list[VcFinishRequestExample]
        """

        self._summary_data = summary_data

    @property
    def call_id(self):
        """Gets the call_id of this VcFinishFields.  # noqa: E501

        Visa Checkout Call Id  # noqa: E501

        :return: The call_id of this VcFinishFields.  # noqa: E501
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this VcFinishFields.

        Visa Checkout Call Id  # noqa: E501

        :param call_id: The call_id of this VcFinishFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and call_id is None:  # noqa: E501
            raise ValueError("Invalid value for `call_id`, must not be `None`")  # noqa: E501

        self._call_id = call_id

    @property
    def language(self):
        """Gets the language of this VcFinishFields.  # noqa: E501


        :return: The language of this VcFinishFields.  # noqa: E501
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VcFinishFields.


        :param language: The language of this VcFinishFields.  # noqa: E501
        :type: Language
        """

        self._language = language

    @property
    def sign(self):
        """Gets the sign of this VcFinishFields.  # noqa: E501

        Sign is calculated from cryptographic hash function set in Merchant’s Panel (default SHA-1): hash_alg (method + call_id + language + enable_pow_url + verification code) where + means concatenation.  # noqa: E501

        :return: The sign of this VcFinishFields.  # noqa: E501
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this VcFinishFields.

        Sign is calculated from cryptographic hash function set in Merchant’s Panel (default SHA-1): hash_alg (method + call_id + language + enable_pow_url + verification code) where + means concatenation.  # noqa: E501

        :param sign: The sign of this VcFinishFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sign is None:  # noqa: E501
            raise ValueError("Invalid value for `sign`, must not be `None`")  # noqa: E501

        self._sign = sign

    @property
    def enable_pow_url(self):
        """Gets the enable_pow_url of this VcFinishFields.  # noqa: E501

        If parameter was sent, system will redirect a cutomer to the merchant site after payment. 1 – redirect Adress is set in Merchant Panel.  # noqa: E501

        :return: The enable_pow_url of this VcFinishFields.  # noqa: E501
        :rtype: int
        """
        return self._enable_pow_url

    @enable_pow_url.setter
    def enable_pow_url(self, enable_pow_url):
        """Sets the enable_pow_url of this VcFinishFields.

        If parameter was sent, system will redirect a cutomer to the merchant site after payment. 1 – redirect Adress is set in Merchant Panel.  # noqa: E501

        :param enable_pow_url: The enable_pow_url of this VcFinishFields.  # noqa: E501
        :type: int
        """

        self._enable_pow_url = enable_pow_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VcFinishFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VcFinishFields):
            return True

        return self.to_dict() != other.to_dict()
