# coding: utf-8

"""
    Tpay.com Technical Documentation

     <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>  # noqa: E501

    The version of the OpenAPI document: 1.1.2
    Contact: pt@tpay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RegisterFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'name': 'str',
        'nip': 'str',
        'regon': 'str',
        'krsedg': 'str',
        'legal_form': 'str',
        'branche': 'int',
        'website': 'str',
        'phone': 'str',
        'address_street': 'str',
        'address_block': 'str',
        'address_nr': 'str',
        'address_city': 'str',
        'address_code': 'str',
        'create_api': 'int',
        'offer_code': 'str',
        'test': 'int',
        'api_password': 'str'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'nip': 'nip',
        'regon': 'regon',
        'krsedg': 'krsedg',
        'legal_form': 'legalForm',
        'branche': 'branche',
        'website': 'website',
        'phone': 'phone',
        'address_street': 'addressStreet',
        'address_block': 'addressBlock',
        'address_nr': 'addressNr',
        'address_city': 'addressCity',
        'address_code': 'addressCode',
        'create_api': 'createApi',
        'offer_code': 'offerCode',
        'test': 'test',
        'api_password': 'api_password'
    }

    def __init__(self, email=None, name=None, nip=None, regon=None, krsedg=None, legal_form=None, branche=None, website=None, phone=None, address_street=None, address_block=None, address_nr=None, address_city=None, address_code=None, create_api=None, offer_code=None, test=None, api_password=None, local_vars_configuration=None):  # noqa: E501
        """RegisterFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._name = None
        self._nip = None
        self._regon = None
        self._krsedg = None
        self._legal_form = None
        self._branche = None
        self._website = None
        self._phone = None
        self._address_street = None
        self._address_block = None
        self._address_nr = None
        self._address_city = None
        self._address_code = None
        self._create_api = None
        self._offer_code = None
        self._test = None
        self._api_password = None
        self.discriminator = None

        self.email = email
        self.name = name
        self.nip = nip
        if regon is not None:
            self.regon = regon
        if krsedg is not None:
            self.krsedg = krsedg
        self.legal_form = legal_form
        self.branche = branche
        if website is not None:
            self.website = website
        self.phone = phone
        self.address_street = address_street
        self.address_block = address_block
        self.address_nr = address_nr
        self.address_city = address_city
        self.address_code = address_code
        if create_api is not None:
            self.create_api = create_api
        if offer_code is not None:
            self.offer_code = offer_code
        if test is not None:
            self.test = test
        self.api_password = api_password

    @property
    def email(self):
        """Gets the email of this RegisterFields.  # noqa: E501

        Merchant email. Access data for Tpay.com account will be send on this email after registration.  # noqa: E501

        :return: The email of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegisterFields.

        Merchant email. Access data for Tpay.com account will be send on this email after registration.  # noqa: E501

        :param email: The email of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 64):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `64`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this RegisterFields.  # noqa: E501

        Merchant's company name.  # noqa: E501

        :return: The name of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterFields.

        Merchant's company name.  # noqa: E501

        :param name: The name of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self._name = name

    @property
    def nip(self):
        """Gets the nip of this RegisterFields.  # noqa: E501

        Taxpayer identification number.  # noqa: E501

        :return: The nip of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._nip

    @nip.setter
    def nip(self, nip):
        """Sets the nip of this RegisterFields.

        Taxpayer identification number.  # noqa: E501

        :param nip: The nip of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and nip is None:  # noqa: E501
            raise ValueError("Invalid value for `nip`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nip is not None and len(nip) > 16):
            raise ValueError("Invalid value for `nip`, length must be less than or equal to `16`")  # noqa: E501

        self._nip = nip

    @property
    def regon(self):
        """Gets the regon of this RegisterFields.  # noqa: E501

        National Business Registry Number.  # noqa: E501

        :return: The regon of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._regon

    @regon.setter
    def regon(self, regon):
        """Sets the regon of this RegisterFields.

        National Business Registry Number.  # noqa: E501

        :param regon: The regon of this RegisterFields.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                regon is not None and len(regon) > 14):
            raise ValueError("Invalid value for `regon`, length must be less than or equal to `14`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                regon is not None and len(regon) < 9):
            raise ValueError("Invalid value for `regon`, length must be greater than or equal to `9`")  # noqa: E501

        self._regon = regon

    @property
    def krsedg(self):
        """Gets the krsedg of this RegisterFields.  # noqa: E501

        Entry number from National Court Register  # noqa: E501

        :return: The krsedg of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._krsedg

    @krsedg.setter
    def krsedg(self, krsedg):
        """Sets the krsedg of this RegisterFields.

        Entry number from National Court Register  # noqa: E501

        :param krsedg: The krsedg of this RegisterFields.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                krsedg is not None and len(krsedg) > 32):
            raise ValueError("Invalid value for `krsedg`, length must be less than or equal to `32`")  # noqa: E501

        self._krsedg = krsedg

    @property
    def legal_form(self):
        """Gets the legal_form of this RegisterFields.  # noqa: E501

        Legal Form Id received from 'inputs' method.  # noqa: E501

        :return: The legal_form of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this RegisterFields.

        Legal Form Id received from 'inputs' method.  # noqa: E501

        :param legal_form: The legal_form of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and legal_form is None:  # noqa: E501
            raise ValueError("Invalid value for `legal_form`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                legal_form is not None and len(legal_form) > 5):
            raise ValueError("Invalid value for `legal_form`, length must be less than or equal to `5`")  # noqa: E501

        self._legal_form = legal_form

    @property
    def branche(self):
        """Gets the branche of this RegisterFields.  # noqa: E501

        Branche id received from 'inputs' method.  # noqa: E501

        :return: The branche of this RegisterFields.  # noqa: E501
        :rtype: int
        """
        return self._branche

    @branche.setter
    def branche(self, branche):
        """Sets the branche of this RegisterFields.

        Branche id received from 'inputs' method.  # noqa: E501

        :param branche: The branche of this RegisterFields.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and branche is None:  # noqa: E501
            raise ValueError("Invalid value for `branche`, must not be `None`")  # noqa: E501

        self._branche = branche

    @property
    def website(self):
        """Gets the website of this RegisterFields.  # noqa: E501

        Merchant's website  # noqa: E501

        :return: The website of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this RegisterFields.

        Merchant's website  # noqa: E501

        :param website: The website of this RegisterFields.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                website is not None and len(website) > 120):
            raise ValueError("Invalid value for `website`, length must be less than or equal to `120`")  # noqa: E501

        self._website = website

    @property
    def phone(self):
        """Gets the phone of this RegisterFields.  # noqa: E501

        Merchant phone number  # noqa: E501

        :return: The phone of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this RegisterFields.

        Merchant phone number  # noqa: E501

        :param phone: The phone of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and phone is None:  # noqa: E501
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                phone is not None and len(phone) > 16):
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `16`")  # noqa: E501

        self._phone = phone

    @property
    def address_street(self):
        """Gets the address_street of this RegisterFields.  # noqa: E501

        Merchant's company street address.  # noqa: E501

        :return: The address_street of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._address_street

    @address_street.setter
    def address_street(self, address_street):
        """Sets the address_street of this RegisterFields.

        Merchant's company street address.  # noqa: E501

        :param address_street: The address_street of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_street is None:  # noqa: E501
            raise ValueError("Invalid value for `address_street`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_street is not None and len(address_street) > 128):
            raise ValueError("Invalid value for `address_street`, length must be less than or equal to `128`")  # noqa: E501

        self._address_street = address_street

    @property
    def address_block(self):
        """Gets the address_block of this RegisterFields.  # noqa: E501

        Merchant's company block number.  # noqa: E501

        :return: The address_block of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._address_block

    @address_block.setter
    def address_block(self, address_block):
        """Sets the address_block of this RegisterFields.

        Merchant's company block number.  # noqa: E501

        :param address_block: The address_block of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_block is None:  # noqa: E501
            raise ValueError("Invalid value for `address_block`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_block is not None and len(address_block) > 10):
            raise ValueError("Invalid value for `address_block`, length must be less than or equal to `10`")  # noqa: E501

        self._address_block = address_block

    @property
    def address_nr(self):
        """Gets the address_nr of this RegisterFields.  # noqa: E501

        Merchant's company local number.  # noqa: E501

        :return: The address_nr of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._address_nr

    @address_nr.setter
    def address_nr(self, address_nr):
        """Sets the address_nr of this RegisterFields.

        Merchant's company local number.  # noqa: E501

        :param address_nr: The address_nr of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_nr is None:  # noqa: E501
            raise ValueError("Invalid value for `address_nr`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_nr is not None and len(address_nr) > 10):
            raise ValueError("Invalid value for `address_nr`, length must be less than or equal to `10`")  # noqa: E501

        self._address_nr = address_nr

    @property
    def address_city(self):
        """Gets the address_city of this RegisterFields.  # noqa: E501

        Merchant's company city address.  # noqa: E501

        :return: The address_city of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this RegisterFields.

        Merchant's company city address.  # noqa: E501

        :param address_city: The address_city of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_city is None:  # noqa: E501
            raise ValueError("Invalid value for `address_city`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_city is not None and len(address_city) > 64):
            raise ValueError("Invalid value for `address_city`, length must be less than or equal to `64`")  # noqa: E501

        self._address_city = address_city

    @property
    def address_code(self):
        """Gets the address_code of this RegisterFields.  # noqa: E501

        Merchant's company city postal code.  # noqa: E501

        :return: The address_code of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._address_code

    @address_code.setter
    def address_code(self, address_code):
        """Sets the address_code of this RegisterFields.

        Merchant's company city postal code.  # noqa: E501

        :param address_code: The address_code of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address_code is None:  # noqa: E501
            raise ValueError("Invalid value for `address_code`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                address_code is not None and len(address_code) > 10):
            raise ValueError("Invalid value for `address_code`, length must be less than or equal to `10`")  # noqa: E501

        self._address_code = address_code

    @property
    def create_api(self):
        """Gets the create_api of this RegisterFields.  # noqa: E501

        Generate access for API transaction. Access data (api_key and  api_password) will be returned in response.  # noqa: E501

        :return: The create_api of this RegisterFields.  # noqa: E501
        :rtype: int
        """
        return self._create_api

    @create_api.setter
    def create_api(self, create_api):
        """Sets the create_api of this RegisterFields.

        Generate access for API transaction. Access data (api_key and  api_password) will be returned in response.  # noqa: E501

        :param create_api: The create_api of this RegisterFields.  # noqa: E501
        :type: int
        """

        self._create_api = create_api

    @property
    def offer_code(self):
        """Gets the offer_code of this RegisterFields.  # noqa: E501

        Offer code dedicate for merchant and  generate by Sales Department.  # noqa: E501

        :return: The offer_code of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._offer_code

    @offer_code.setter
    def offer_code(self, offer_code):
        """Sets the offer_code of this RegisterFields.

        Offer code dedicate for merchant and  generate by Sales Department.  # noqa: E501

        :param offer_code: The offer_code of this RegisterFields.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                offer_code is not None and len(offer_code) > 5):
            raise ValueError("Invalid value for `offer_code`, length must be less than or equal to `5`")  # noqa: E501

        self._offer_code = offer_code

    @property
    def test(self):
        """Gets the test of this RegisterFields.  # noqa: E501

        Parameter allows recieved an example response with merchant data without creating new account in Tpay.com system. Parameter is obligatory in initial stage of integration.  # noqa: E501

        :return: The test of this RegisterFields.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this RegisterFields.

        Parameter allows recieved an example response with merchant data without creating new account in Tpay.com system. Parameter is obligatory in initial stage of integration.  # noqa: E501

        :param test: The test of this RegisterFields.  # noqa: E501
        :type: int
        """

        self._test = test

    @property
    def api_password(self):
        """Gets the api_password of this RegisterFields.  # noqa: E501

        API password.  # noqa: E501

        :return: The api_password of this RegisterFields.  # noqa: E501
        :rtype: str
        """
        return self._api_password

    @api_password.setter
    def api_password(self, api_password):
        """Sets the api_password of this RegisterFields.

        API password.  # noqa: E501

        :param api_password: The api_password of this RegisterFields.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_password is None:  # noqa: E501
            raise ValueError("Invalid value for `api_password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                api_password is not None and len(api_password) > 40):
            raise ValueError("Invalid value for `api_password`, length must be less than or equal to `40`")  # noqa: E501

        self._api_password = api_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterFields):
            return True

        return self.to_dict() != other.to_dict()
