# coding: utf-8

"""
    Tpay.com Technical Documentation

     <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>  # noqa: E501

    The version of the OpenAPI document: 1.1.2
    Contact: pt@tpay.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TransfersObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'auth_date': 'str',
        'acc_date': 'str',
        'status': 'str',
        'accnum': 'str',
        'rcv1': 'str',
        'rcv2': 'str',
        'rcv3': 'str',
        'rcv4': 'str',
        'amount': 'float',
        'title1': 'str',
        'title2': 'str',
        'tr_id': 'float'
    }

    attribute_map = {
        'date': 'date',
        'auth_date': 'auth_date',
        'acc_date': 'acc_date',
        'status': 'status',
        'accnum': 'accnum',
        'rcv1': 'rcv1',
        'rcv2': 'rcv2',
        'rcv3': 'rcv3',
        'rcv4': 'rcv4',
        'amount': 'amount',
        'title1': 'title1',
        'title2': 'title2',
        'tr_id': 'tr_id'
    }

    def __init__(self, date=None, auth_date=None, acc_date=None, status=None, accnum=None, rcv1=None, rcv2=None, rcv3=None, rcv4=None, amount=None, title1=None, title2=None, tr_id=None, local_vars_configuration=None):  # noqa: E501
        """TransfersObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._auth_date = None
        self._acc_date = None
        self._status = None
        self._accnum = None
        self._rcv1 = None
        self._rcv2 = None
        self._rcv3 = None
        self._rcv4 = None
        self._amount = None
        self._title1 = None
        self._title2 = None
        self._tr_id = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if auth_date is not None:
            self.auth_date = auth_date
        if acc_date is not None:
            self.acc_date = acc_date
        if status is not None:
            self.status = status
        if accnum is not None:
            self.accnum = accnum
        if rcv1 is not None:
            self.rcv1 = rcv1
        if rcv2 is not None:
            self.rcv2 = rcv2
        if rcv3 is not None:
            self.rcv3 = rcv3
        if rcv4 is not None:
            self.rcv4 = rcv4
        if amount is not None:
            self.amount = amount
        if title1 is not None:
            self.title1 = title1
        if title2 is not None:
            self.title2 = title2
        if tr_id is not None:
            self.tr_id = tr_id

    @property
    def date(self):
        """Gets the date of this TransfersObject.  # noqa: E501

        Date of creating payment  # noqa: E501

        :return: The date of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TransfersObject.

        Date of creating payment  # noqa: E501

        :param date: The date of this TransfersObject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                date is not None and not re.search(r'YYYY-MM-DD HH:mm:ss', date)):  # noqa: E501
            raise ValueError(r"Invalid value for `date`, must be a follow pattern or equal to `/YYYY-MM-DD HH:mm:ss/`")  # noqa: E501

        self._date = date

    @property
    def auth_date(self):
        """Gets the auth_date of this TransfersObject.  # noqa: E501

        Date of payment authorization (method authorize). Field can be empty.  # noqa: E501

        :return: The auth_date of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._auth_date

    @auth_date.setter
    def auth_date(self, auth_date):
        """Sets the auth_date of this TransfersObject.

        Date of payment authorization (method authorize). Field can be empty.  # noqa: E501

        :param auth_date: The auth_date of this TransfersObject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                auth_date is not None and not re.search(r'YYYY-MM-DD HH:mm:ss', auth_date)):  # noqa: E501
            raise ValueError(r"Invalid value for `auth_date`, must be a follow pattern or equal to `/YYYY-MM-DD HH:mm:ss/`")  # noqa: E501

        self._auth_date = auth_date

    @property
    def acc_date(self):
        """Gets the acc_date of this TransfersObject.  # noqa: E501

        Date of posting payment  # noqa: E501

        :return: The acc_date of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._acc_date

    @acc_date.setter
    def acc_date(self, acc_date):
        """Sets the acc_date of this TransfersObject.

        Date of posting payment  # noqa: E501

        :param acc_date: The acc_date of this TransfersObject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                acc_date is not None and not re.search(r'YYYY-MM-DD HH:mm:ss', acc_date)):  # noqa: E501
            raise ValueError(r"Invalid value for `acc_date`, must be a follow pattern or equal to `/YYYY-MM-DD HH:mm:ss/`")  # noqa: E501

        self._acc_date = acc_date

    @property
    def status(self):
        """Gets the status of this TransfersObject.  # noqa: E501

        Payment status  # noqa: E501

        :return: The status of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransfersObject.

        Payment status  # noqa: E501

        :param status: The status of this TransfersObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "auth", "processed", "done"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def accnum(self):
        """Gets the accnum of this TransfersObject.  # noqa: E501

        Bank account number (format IBAN, 26 digits)  # noqa: E501

        :return: The accnum of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._accnum

    @accnum.setter
    def accnum(self, accnum):
        """Sets the accnum of this TransfersObject.

        Bank account number (format IBAN, 26 digits)  # noqa: E501

        :param accnum: The accnum of this TransfersObject.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                accnum is not None and len(accnum) > 26):
            raise ValueError("Invalid value for `accnum`, length must be less than or equal to `26`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                accnum is not None and len(accnum) < 26):
            raise ValueError("Invalid value for `accnum`, length must be greater than or equal to `26`")  # noqa: E501

        self._accnum = accnum

    @property
    def rcv1(self):
        """Gets the rcv1 of this TransfersObject.  # noqa: E501

        Receiver name (first part)  # noqa: E501

        :return: The rcv1 of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._rcv1

    @rcv1.setter
    def rcv1(self, rcv1):
        """Sets the rcv1 of this TransfersObject.

        Receiver name (first part)  # noqa: E501

        :param rcv1: The rcv1 of this TransfersObject.  # noqa: E501
        :type: str
        """

        self._rcv1 = rcv1

    @property
    def rcv2(self):
        """Gets the rcv2 of this TransfersObject.  # noqa: E501

        Receiver name (second part)  # noqa: E501

        :return: The rcv2 of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._rcv2

    @rcv2.setter
    def rcv2(self, rcv2):
        """Sets the rcv2 of this TransfersObject.

        Receiver name (second part)  # noqa: E501

        :param rcv2: The rcv2 of this TransfersObject.  # noqa: E501
        :type: str
        """

        self._rcv2 = rcv2

    @property
    def rcv3(self):
        """Gets the rcv3 of this TransfersObject.  # noqa: E501

        Receiver name (third part)  # noqa: E501

        :return: The rcv3 of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._rcv3

    @rcv3.setter
    def rcv3(self, rcv3):
        """Sets the rcv3 of this TransfersObject.

        Receiver name (third part)  # noqa: E501

        :param rcv3: The rcv3 of this TransfersObject.  # noqa: E501
        :type: str
        """

        self._rcv3 = rcv3

    @property
    def rcv4(self):
        """Gets the rcv4 of this TransfersObject.  # noqa: E501

        Receiver name (fourth part)  # noqa: E501

        :return: The rcv4 of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._rcv4

    @rcv4.setter
    def rcv4(self, rcv4):
        """Sets the rcv4 of this TransfersObject.

        Receiver name (fourth part)  # noqa: E501

        :param rcv4: The rcv4 of this TransfersObject.  # noqa: E501
        :type: str
        """

        self._rcv4 = rcv4

    @property
    def amount(self):
        """Gets the amount of this TransfersObject.  # noqa: E501

        transaction amount casted to float  # noqa: E501

        :return: The amount of this TransfersObject.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransfersObject.

        transaction amount casted to float  # noqa: E501

        :param amount: The amount of this TransfersObject.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                amount is not None and amount < 0.1):  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._amount = amount

    @property
    def title1(self):
        """Gets the title1 of this TransfersObject.  # noqa: E501

        Payment title (first part)  # noqa: E501

        :return: The title1 of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._title1

    @title1.setter
    def title1(self, title1):
        """Sets the title1 of this TransfersObject.

        Payment title (first part)  # noqa: E501

        :param title1: The title1 of this TransfersObject.  # noqa: E501
        :type: str
        """

        self._title1 = title1

    @property
    def title2(self):
        """Gets the title2 of this TransfersObject.  # noqa: E501

        Payment title (second part)  # noqa: E501

        :return: The title2 of this TransfersObject.  # noqa: E501
        :rtype: str
        """
        return self._title2

    @title2.setter
    def title2(self, title2):
        """Sets the title2 of this TransfersObject.

        Payment title (second part)  # noqa: E501

        :param title2: The title2 of this TransfersObject.  # noqa: E501
        :type: str
        """

        self._title2 = title2

    @property
    def tr_id(self):
        """Gets the tr_id of this TransfersObject.  # noqa: E501

        Payment ID in tpay.com system  # noqa: E501

        :return: The tr_id of this TransfersObject.  # noqa: E501
        :rtype: float
        """
        return self._tr_id

    @tr_id.setter
    def tr_id(self, tr_id):
        """Sets the tr_id of this TransfersObject.

        Payment ID in tpay.com system  # noqa: E501

        :param tr_id: The tr_id of this TransfersObject.  # noqa: E501
        :type: float
        """

        self._tr_id = tr_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransfersObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransfersObject):
            return True

        return self.to_dict() != other.to_dict()
